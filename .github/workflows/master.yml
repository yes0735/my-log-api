name: '[PRODUCTION] my-log-api deploy'
on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
      - name: Create configuration files
        run: |
          echo "${{ secrets.APPLICATION_LOCAL }}" > src/main/resources/application-local.yml
          echo "${{ secrets.APPLICATION_DEV }}" > src/main/resources/application-dev.yml
          echo "${{ secrets.APPLICATION_PROD }}" > src/main/resources/application-prod.yml
          echo '${{ secrets.APPLICATION_SECRET }}' > src/main/resources/application-secret.yml 
          echo "${{ secrets.APPLICATION_SWAGGER }}" > src/main/resources/application-swagger.yml

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permisson for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Docker Hub build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker rm -f $(sudo docker ps -qa) || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            export RDS_HOST=${{ secrets.RDS_HOST }}
            export RDS_PORT=${{ secrets.RDS_PORT }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            sudo RDS_HOST=$RDS_HOST \
                 RDS_PORT=$RDS_PORT \
                 DB_USERNAME=$DB_USERNAME \
                 DB_PASSWORD=$DB_PASSWORD \
                 docker-compose up -d --build
            sudo docker image prune -f
